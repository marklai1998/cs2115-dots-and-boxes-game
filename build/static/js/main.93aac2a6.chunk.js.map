{"version":3,"sources":["assets/logo.svg","assets/github-logo.svg","utils/initState.js","components/Dot/index.js","constants/playerMap.js","constants/boardMap.js","components/Line/index.js","components/Box/index.js","containers/Board/index.js","utils/checkComplete.js","components/ScoreBoard/index.js","components/CurrentColor/index.js","utils/checkScore.js","components/WinBox/index.js","utils/checkWinner.js","containers/Game/index.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","size","Dot","react_default","a","createElement","className","player","B","R","board","Object","objectSpread","O","N","D","Line","_React$PureComponent","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","onClick","props","state","row","col","inherits","createClass","key","value","_this$props","current","React","PureComponent","Box","memo","_ref","Board","map","rowCount","isOdd","colCount","Box_Box","Line_Line","onLineClick","Dot_Dot","checkComplete","boardArr","checkOrigin","origin","rowMax","colMax","height","width","rectangleSize","isRectangle","colorArea","slice","some","cell","rowOffSet","rowFirstCell","rowLastCell","colOffSet","rowOffset","colOffset","assocPath","ScoreBoard","reset","type","CurrentColor","checkScore","defineProperty","WinBox","winner","show","checkWinner","remainBox","InitialState","_InitialState","toConsumableArray","__","isOddRow","fill","index","Game","newBoard","boardWithComplete","newScore","setState","WinBox_WinBox","ScoreBoard_ScoreBoard","CurrentColor_CurrentColor","Board_Board","Header","src","logo","alt","href","ghLogo","Footer","App","Header_Header","Game_Game","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93aac2a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7959c8ce.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-logo.750dac63.svg\";","import { board } from '../constants/boardMap'\r\n\r\nexport const initBoard = size =>\r\n  [...Array(size * 2 - 1)].map((__, rowCount) => {\r\n    const isOddRow = rowCount % 2\r\n    const row = [...Array(size * 2 - 1)]\r\n    return isOddRow\r\n      ? row.fill(board.N)\r\n      : row.map((value, index) => (index % 2 ? board.N : board.O))\r\n  })\r\n","import React from 'react'\r\n\r\nimport './index.css'\r\n\r\nexport const Dot = () => {\r\n  return <div className='dot'><div /></div>\r\n}\r\n","export const player = {\r\n  B: 'B',\r\n  R: 'R'\r\n}\r\n","import { player } from './playerMap'\r\n\r\nexport const board = {\r\n  O: 'O',\r\n  N: 'N',\r\n  D: 'D',\r\n  ...player\r\n}\r\n","import React from 'react'\r\n\r\nimport './index.css'\r\nimport { board } from '../../constants/boardMap'\r\n\r\nexport class Line extends React.PureComponent {\r\n  onClick = () => {\r\n    if (this.props.state === board.N) {\r\n      this.props.onClick(this.props.row, this.props.col)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { className, state, current } = this.props\r\n    return (\r\n      <div className={`line ${className} ${state} current-${current}`}>\r\n        <div className='trigger' onClick={this.onClick} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport './index.css'\r\n\r\nexport const Box = React.memo(({ state }) => {\r\n  return <div className={`box ${state}`} />\r\n})\r\n","import React from 'react'\r\n\r\nimport './index.css'\r\nimport { Dot } from '../../components/Dot'\r\nimport { Line } from '../../components/Line'\r\nimport { Box } from '../../components/Box'\r\nimport { board } from '../../constants/boardMap'\r\n\r\nexport const Board = React.memo(props => (\r\n  <div className='board'>\r\n    {props.board.map((row, rowCount) => {\r\n      const isOdd = rowCount % 2\r\n      return (\r\n        <div className='row' key={rowCount}>\r\n          {isOdd\r\n            ? row.map(\r\n                (col, colCount) =>\r\n                  (colCount % 2\r\n                    ? <Box key={rowCount + '-' + colCount} state={col} />\r\n                    : <Line\r\n                      key={rowCount + '-' + colCount}\r\n                      state={col}\r\n                      current={props.current}\r\n                      row={rowCount}\r\n                      col={colCount}\r\n                      onClick={props.onLineClick}\r\n                      />)\r\n              )\r\n            : row.map(\r\n                (col, colCount) =>\r\n                  (col === board.O\r\n                    ? <Dot key={rowCount + '-' + colCount} />\r\n                    : <Line\r\n                      className='even'\r\n                      key={rowCount + '-' + colCount}\r\n                      state={col}\r\n                      current={props.current}\r\n                      row={rowCount}\r\n                      col={colCount}\r\n                      onClick={props.onLineClick}\r\n                      />)\r\n              )}\r\n        </div>\r\n      )\r\n    })}\r\n  </div>\r\n))\r\n","import { assocPath, slice } from 'ramda'\r\n\r\nimport { board } from '../constants/boardMap'\r\n\r\nexport const checkComplete = (boardArr, current) => {\r\n  for (let row = 0; row < boardArr.length; row = row + 2) {\r\n    for (let col = 0; col < boardArr.length; col = col + 2) {\r\n      boardArr = checkOrigin({ row, col })(boardArr, current)\r\n    }\r\n  }\r\n  return boardArr\r\n}\r\n\r\nconst checkOrigin = origin => (boardArr, current) => {\r\n  const rowMax = boardArr.length - origin.row\r\n  const colMax = boardArr.length - origin.col\r\n  for (let height = 2; height < rowMax; height = height + 2) {\r\n    for (let width = 2; width < colMax; width = width + 2) {\r\n      const rectangleSize = { width, height }\r\n      if (isRectangle(origin, rectangleSize)(boardArr)) {\r\n        boardArr = colorArea(origin, rectangleSize)(boardArr, current)\r\n      }\r\n    }\r\n  }\r\n  return boardArr\r\n}\r\n\r\nconst isRectangle = (origin, rectangleSize) => boardArr => {\r\n  const firstRow = slice(\r\n    origin.col,\r\n    origin.col + rectangleSize.width,\r\n    boardArr[origin.row]\r\n  )\r\n  if (firstRow.some(cell => cell === board.N)) return false\r\n\r\n  const lastRow = slice(\r\n    origin.col,\r\n    origin.col + rectangleSize.width,\r\n    boardArr[origin.row + rectangleSize.height]\r\n  )\r\n  if (lastRow.some(cell => cell === board.N)) return false\r\n\r\n  for (let rowOffSet = 1; rowOffSet < rectangleSize.height; rowOffSet++) {\r\n    const rowFirstCell = boardArr[origin.row + rowOffSet][origin.col]\r\n    const rowLastCell =\r\n      boardArr[origin.row + rowOffSet][origin.col + rectangleSize.width]\r\n    if (rowFirstCell === board.N || rowLastCell === board.N) return false\r\n\r\n    for (let colOffSet = 1; colOffSet < rectangleSize.width; colOffSet++) {\r\n      const cell = boardArr[origin.row + rowOffSet][origin.col + colOffSet]\r\n      if (cell !== board.N && cell !== board.O) return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nconst colorArea = (origin, rectangleSize) => (boardArr, current) => {\r\n  for (let rowOffset = 1; rowOffset < rectangleSize.height; rowOffset++) {\r\n    for (let colOffset = 1; colOffset < rectangleSize.width; colOffset++) {\r\n      const row = origin.row + rowOffset\r\n      const col = origin.col + colOffset\r\n      const cell = boardArr[row][col]\r\n      if (cell !== board.O) {\r\n        boardArr = row % 2 && col % 2\r\n          ? assocPath([row, col], current, boardArr)\r\n          : assocPath([row, col], board.D, boardArr)\r\n      }\r\n    }\r\n  }\r\n  return boardArr\r\n}\r\n","import React from 'react'\r\n\r\nimport './index.css'\r\n\r\nexport const ScoreBoard = React.memo(({ B, R, reset }) => (\r\n  <div className='score-board'>\r\n    <span className='score B'>{B}</span>\r\n    <button type='button' className='reset' onClick={reset}>\r\n      <i className='fas fa-redo-alt' />\r\n    </button>\r\n    <span className='score R'>{R}</span>\r\n  </div>\r\n))\r\n","import React from 'react'\r\n\r\nimport './index.css'\r\n\r\nexport const CurrentColor = React.memo(({ current }) => (\r\n  <div className={`current-color ${current}`} />\r\n))\r\n","import { player } from '../constants/playerMap'\r\n\r\nexport const checkScore = boardArr => {\r\n  let B = 0, R = 0\r\n  for (let row = 1; row < boardArr.length; row = row + 2) {\r\n    for (let col = 1; col < boardArr.length; col = col + 2) {\r\n      if (boardArr[row][col] === player.B) B++\r\n      if (boardArr[row][col] === player.R) R++\r\n    }\r\n  }\r\n  return {\r\n    [player.B]: B,\r\n    [player.R]: R\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport './index.css'\r\nimport { player } from '../../constants/playerMap'\r\n\r\nexport const WinBox = React.memo(({ winner, show }) => (\r\n  <div className={show ? 'win-box show' : 'win-box'}>\r\n    {winner === player.B ? 'Blue' : 'Red'} Won!\r\n  </div>\r\n))\r\n","import { player } from '../constants/playerMap'\r\n\r\nexport const checkWinner = ({ B, R }) => {\r\n  const remainBox = 81 - B - R\r\n  if (B < R) {\r\n    if (B + remainBox < R) return player.R\r\n  } else {\r\n    if (R + remainBox < B) return player.B\r\n  }\r\n  return null\r\n}\r\n","import React from 'react'\r\nimport { assocPath } from 'ramda'\r\n\r\nimport './index.css'\r\nimport { Board } from '../Board'\r\nimport { initBoard } from '../../utils/initState'\r\nimport { player } from '../../constants/playerMap'\r\nimport { checkComplete } from '../../utils/checkComplete'\r\nimport { ScoreBoard } from '../../components/ScoreBoard'\r\nimport { CurrentColor } from '../../components/CurrentColor'\r\nimport { checkScore } from '../../utils/checkScore'\r\nimport { WinBox } from '../../components/WinBox'\r\nimport { checkWinner } from '../../utils/checkWinner'\r\n\r\nconst InitialState = {\r\n  current: player.B,\r\n  board: initBoard(10),\r\n  winner: null,\r\n  [player.B]: 0,\r\n  [player.R]: 0\r\n}\r\n\r\nexport class Game extends React.PureComponent {\r\n  state = InitialState\r\n\r\n  onLineClick = (row, col) => {\r\n    const newBoard = assocPath([row, col], this.state.current, this.state.board)\r\n    const boardWithComplete = checkComplete(newBoard, this.state.current)\r\n    const newScore = checkScore(boardWithComplete)\r\n    const winner = checkWinner(newScore)\r\n    this.setState({\r\n      board: boardWithComplete,\r\n      current: this.state.current === player.B ? player.R : player.B,\r\n      winner,\r\n      ...newScore\r\n    })\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState(InitialState)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='game-wrapper'>\r\n        <WinBox winner={this.state.winner} show={this.state.winner !== null} />\r\n        <ScoreBoard B={this.state.B} R={this.state.R} reset={this.reset} />\r\n        <CurrentColor current={this.state.current} />\r\n        <Board\r\n          size={this.state.size}\r\n          board={this.state.board}\r\n          current={this.state.current}\r\n          onLineClick={this.onLineClick}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport './index.css'\r\nimport logo from '../../assets/logo.svg'\r\nimport ghLogo from '../../assets/github-logo.svg'\r\n\r\nexport const Header = () => (\r\n  <header className='header'>\r\n    <img src={logo} className='logo' alt='logo' />\r\n    <div className='title'>CS2115 Dots and Boxes game</div>\r\n    <a href='https://github.com/marklai1998/cs2115-dots-and-boxes-game'>\r\n      <img src={ghLogo} className='ghLogo' alt='git-hub-logo' />\r\n    </a>\r\n  </header>\r\n)\r\n","import React from 'react'\r\n\r\nimport './index.css'\r\n\r\nexport const Footer = () => (\r\n  <footer\r\n    className=\"footer\"\r\n  >\r\n    Build with <i className='fab fa-react' />\r\n    React.js\r\n  </footer>\r\n)\r\n","import React from 'react'\nimport { Game } from './containers/Game'\nimport './App.css'\nimport { Header } from './components/Header'\nimport { Footer } from './components/Footer'\n\nexport const App = React.memo(() => (\n  <div className='app'>\n    <Header />\n    <Game />\n    <Footer />\n  </div>\n))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}